# vi:syntax=bash
#!/bin/bash

# As always, thank you to this stackoverflow for the options parsing template: https://stackoverflow.com/a/29754866

DEFAULT_GCLOUD_LOCATION="$HOME/.config/gcloud/"

usage () {
  return_code=$1

cat <<HEREDOC
fix-gcloud-permissions

Description:
  Fixes those weird, pesky gcloud sdk directory permissions errors you sometimes get.

  May ask for your sudo password due to the sdk directory sometimes accidentally getting chown'd to root.

Usage:
  fix-gcloud-permissions [-h] [-d <gcloud_dir>]

Options:
  -d|--gcloud_dir <gcloud_dir>  : gcloud sdk directory [default: $HOME/.config/gcloud]
  -h|--help                     : show this usage text
HEREDOC

  exit $return_code
}

# More safety, by turning some bugs into errors.
# Without `errexit` you don’t need ! and can replace
# PIPESTATUS with a simple $?, but I don’t do that.
set -o errexit -o pipefail -o noclobber -o nounset

# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  echo '`getopt --test` failed in this environment.'
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo 'try running `brew install gnu-getopt` and then putting `export PATH="/usr/local/opt/gnu-getopt/bin:$PATH"` into your shellrc file'
  fi
  exit 1
fi

OPTIONS=hd:
LONGOPTS=help,gcloud_dir:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

gcloud_dir="$DEFAULT_GCLOUD_LOCATION"

# now enjoy the options in order and nicely split until we see --
while true; do
  case "$1" in
    -d|--gcloud_dir)
      gcloud_dir="$2"
      shift 2
      ;;
    -h|--help)
      usage 0
      break
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "$1: invalid argument" >&2
      echo ''
      usage 2
      ;;
  esac
done

sudo chown -R $USER $gcloud_dir